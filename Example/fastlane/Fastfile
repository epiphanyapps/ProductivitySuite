# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.22.0"

default_platform :ios

platform :ios do
    before_all do
        ENV["SLACK_URL"] = ENV['EPIPHANYAPPS_WEBHOOK']
        cocoapods
        
    end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
      register_devices(
          devices: {
              "Sascha's iPhone 6S" => "687c3478292eddfb2d68298d9c8b84c3b98cc5de",
              "Sascha's iPhone 7" => "230c24e9119b33a7f710a52bf855ba4b24b81606",
              "Walter's iPhone 7" => "f9fe7a840b90c2d1c69e2fe62da1d2d50755d3b6",
              "Jan Pichler" =>       "043223f34838800153631265779374188d54dab1",
              "Walter's 42mm Apple Watch Series 2" => "a3e1dae316aa19842746774adaf50fa34ab02996"
          }
      )
      match(
            type: "development",
            readonly: true,
            git_url: ENV['WALTERMVP_MATCH_URL'])
            gym(scheme: "ProductivitySuite-Example"
      )
      
      aws_s3(
             access_key: ENV['WALTERMVP_S3_ACCESS_KEY'],
             secret_access_key: ENV['WALTERMVP_S3_SECRET_ACCESS_KEY'],
             bucket: ENV['WALTERMVP_S3_BUCKET'],
             region: "us-east-1",
             ipa: 'ProductivitySuite_Example.ipa',
             dsym: 'ProductivitySuite_Example.app.dSYM.zip',
             path: 'ProductivitySuite_Example/ProductivitySuite_Example_v{CFBundleShortVersionString}_b{CFBundleVersion}/',
             upload_metadata: true,
             version_file_name: 'ProductivitySuite_Example/app_version.json',
             version_template_path: 'path/to/erb',
             html_file_name: 'ProductivitySuite_Example/ProductivitySuite_Example.html'
             )
     crashlytics(
                 api_token: ENV['2098d6a61ee941aa919089a50ae19559f173b2b4'],
                 build_secret: ENV['8b59285951bec6738c7283a9da37773b5e746f1b11b72a87e1c7496c3f0297cd'],
                 notes: "Fastlane iOS Dev Build"
                 )
      
  end

  desc "Deploy a new version to the App Store"
  lane :release do
    # match(type: "appstore")
    # snapshot
    gym(scheme: "ProductivitySuite-Example") # Build your app - more options available
    deliver(force: true)
    # frameit
  end

  # You can define as many lanes as you want

    after_all do |lane|
        # This block is called, only if the executed lane was successful
        
        builtBy = String.new
        
        if is_ci
            builtBy = "Bitrise"
            else
            builtBy = "Walter's Machine"
        end
        
        slack(
              message: "Successfully deployed new App Update.",
              channel: "#fastlane-bitrise",
              success: true,
              payload: {
                  "Build Date" => Time.new.to_s,
                  "Built by" => builtBy,
              },
              default_payloads: [:git_branch, :git_author, :last_git_commit_message],
              
              attachment_properties: {
                  thumb_url: "https://waltermvp.s3.amazonaws.com/ProductivitySuite_Example/EA.png",
                  fields: [{
                      title: "Download link",
                      value: "https://waltermvp.s3.amazonaws.com/ProductivitySuite_Example/ProductivitySuite_Example.html",
                      short: true,
                      }]
                  }
              )
    end

    error do |lane, exception|
        slack(
              message: exception.message,
              success: false
              )
    end
    
end

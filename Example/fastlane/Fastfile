# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.7.0"

default_platform :ios

platform :ios do
  before_all do
     ENV["SLACK_URL"] = ENV['EPIPHANYAPPS_WEBHOOK']
    cocoapods
    
  end

  desc "Runs all the tests"
  lane :test do
      scan(
           scheme: "ProductivitySuite-Example",
           destination:'platform=iOS,id=b10bb689eec9cb03dbc524fb5d6be6d03cbdc8b4'
           )
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    match(type: "development",
          readonly: true,
          git_url: ENV['WALTERMVP_MATCH_URL'])
    gym(scheme: "ProductivitySuite-Example")
    aws_s3(
           access_key: ENV['WALTERMVP_S3_ACCESS_KEY'],
           secret_access_key: ENV['WALTERMVP_S3_SECRET_ACCESS_KEY'],
           bucket: ENV['WALTERMVP_S3_BUCKET'],
           region: "us-east-1",
           ipa: 'ProductivitySuite_Example.ipa',
           dsym: 'ProductivitySuite_Example.app.dSYM.zip',
           path: 'ProductivitySuite_Example/ProductivitySuite-Example_v{CFBundleShortVersionString}_b{CFBundleVersion}/',
           upload_metadata: true,
           version_file_name: 'ProductivitySuite_Example/app_version.json',
           version_template_path: 'path/to/erb',
           html_file_name: 'ProductivitySuite_Example/ProductivitySuite_Example.html'
           
           )

  end

  desc "Deploy a new version to the App Store"
  lane :release do
    # match(type: "appstore")
    # snapshot
    gym(scheme: "ProductivitySuite-Example") # Build your app - more options available
    deliver(force: true)
    # frameit
  end

  # You can define as many lanes as you want

  after_all do |lane|
      # This block is called, only if the executed lane was successful

      builtBy = String.new

    if is_ci
        builtBy = "Bitrise"
    else
        builtBy = "Walter's Machine"
    end

    slack(
          message: "Successfully deployed new App Update.",
          channel: "#fastlane-bitrise",
          success: true,
          payload: {
          "Build Date" => Time.new.to_s,
          "Built by" => builtBy,
          },
          default_payloads: [:git_branch, :git_author, :last_git_commit_message],
          
          attachment_properties: {
                              thumb_url: "http://example.com/path/to/thumb.png",
                              fields: [{
                                      title: "Download link",
                                      value: "https://waltermvp.s3.amazonaws.com/ProductivitySuite_Example/ProductivitySuite_Example.html",
                                      short: true,
                                      }]
                                    }
          )
  end

  error do |lane, exception|
     slack(
       message: exception.message,
       success: false
     )
  end
end
